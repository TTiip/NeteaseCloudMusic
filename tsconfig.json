{
  "compilerOptions": {
    // 允许使用倒入json文件。
    "resolveJsonModule": true,
    // 可以使用any
    "suppressImplicitAnyIndexErrors": true,
    // 允许不是数组类型或字符串类型使用迭代器进行迭代。
    "downlevelIteration": true,
    // 编译目标规范
    "target": "es5",
    // 指定生成哪个模块系统代码："None"，"CommonJS"，"AMD"，"System"，"UMD"，"ES6"或"ES2015"。
    // 只有 "AMD"和"System"能和--outFile一起使用。
    // "ES6"和"ES2015"可使用在目标输出为"ES5"或更低的情况下。
    "module": "esnext",
    // 启用所有严格类型检查选项。
    "strict": true,
    // 在.tsx文件里支持JSX："React"或"Preserve"
    "jsx": "preserve",
    // 从tslib导入辅助工具函数（比如__extends，__rest等）
    "importHelpers": false,
    // 模块的解析标准
    "moduleResolution": "node",
    // 忽略所有的声明文件（*.d.ts）的类型检查。
    "skipLibCheck": true,
    "esModuleInterop": true,
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 把 ts 文件编译成 js 文件的时候，同时生成对应的 map 文件
    "sourceMap": true,
    // 解析非相对模块名的基准目录
    "baseUrl": ".",
    // 要包含的类型声明文件名列表
    "types": [
      "webpack-env"
    ],
    // 模块名到基于baseUrl的路径映射的列表
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    // 编译过程中需要引入的库文件的列表
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}
